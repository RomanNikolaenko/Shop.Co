@mixin fluid($property, $maxSize, $minSize, $maxWidth: 1440, $minWidth: 320) {
  #{$property}: clamp(
    #{calc($minSize / 16) + rem},
    calc(
      #{calc($minSize / 16) + rem} + (#{$maxSize} - #{$minSize}) *
        (
          (100vw - #{calc($minWidth / 16) + rem}) /
            (#{$maxWidth} - #{$minWidth})
        )
    ),
    #{calc($maxSize / 16) + rem}
  );
}

@mixin interactive() {
  @media (any-hover: hover) {
    &:hover {
      @content;
    }
  }

  &:focus-visible,
  &:active {
    @content;
  }
}

@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

@mixin textDecoration() {
  transition:
    background-size var(--transition-duration) var(--transition-timing-function),
    color var(--transition-duration) var(--transition-timing-function);

  & > span {
    background-image: linear-gradient(to right, currentColor, currentColor);
    background-size: 0 2px;
    background-position: right bottom;
    background-repeat: no-repeat;
    transition: inherit;
  }

  &:focus-visible {
    & > span {
      color: currentColor;
      background-position: left bottom;
      background-size: 100% 2px;
    }
  }

  @media (hover: hover) {
    &:hover {
      & > span {
        color: currentColor;
        background-position: left bottom;
        background-size: 100% 2px;
      }
    }
  }

  @media (hover: none) {
    &:active {
      transition:
        background-size 0.1s var(--transition-timing-function),
        color 0.1s var(--transition-timing-function);

      & > span {
        color: currentColor;
        background-position: left bottom;
        background-size: 100% 2px;
      }
    }
  }
}
